service: products-service

frameworkVersion: '3'

useDotenv: true

custom:
  webpack:
    includeModules: true
  autoswagger:
    title: 'products-service'
    basePath: '/dev'
    apiType: 'http'
    typefiles: [ './types/product.d.ts' ]
    swaggerPath: 'swagger-ui'
    schemes: [ 'http', 'https' ]

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-west-1
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
    SNS_REGION: ${env:SNS_REGION}
    SNS_ADMIN_EMAIL: ${env:SNS_ADMIN_EMAIL}
    SQS_QUEUE_URL:
      Ref: catalogItemsQueue
    SNS_TOPIC_ARN:
      Ref: CatalogNotificationTopic
  vpc:
    securityGroupIds:
      - sg-0638cef869c004839
    subnetIds:
      - subnet-0a253c49dd5b01847
      - subnet-042df5f146ec75e75
      - subnet-09b897b8965f500ec
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt:
          - catalogItemsQueue
          - Arn
    - Effect: Allow
      Action:
        - sns:*
      Resource:
        Ref: CatalogNotificationTopic


plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline

functions:
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: /products/{id}
          method: GET
          cors: true
          summary: "Get product by id"
          description: "Returns product by provided id"
          queryStringParameters:
            id:
              required: true
              type: 'string'
              description: 'Product id'
          responseData:
            200:
              bodyType: 'Product'

  getProductsList:
    handler: handler.getProductsList
    vpc:
      securityGroupIds:
        - sg-0638cef869c004839
    events:
      - http:
          path: /products
          method: GET
          cors: true
          summary: "Get list of products"
          description: "Returns all products"
          responseData:
            200:
              bodyType: '[Product]'

  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: /products
          method: POST
          cors: true
          summary: "Create product"
          description: "Create a new product with initial stock count"
          bodyType: 'Product'

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    timeout: 30
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
        ReceiveMessageWaitTimeSeconds: 20

    CatalogNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: CatalogNotificationTopic

    catalogNotificationTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_ADMIN_EMAIL}
        Protocol: email
        TopicArn:
          Ref: CatalogNotificationTopic
