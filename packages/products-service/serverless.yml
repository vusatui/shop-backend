service: products-service

frameworkVersion: '3'

useDotenv: true

custom:
  webpack:
    includeModules: true
  autoswagger:
    title: 'products-service'
    apiType: 'httpApi'
    typefiles: [ './types/product.d.ts' ]
    swaggerPath: 'swagger-ui'
    schemes: [ 'http' ]

provider:
  name: aws
  runtime: nodejs12.x
  httpApi:
    cors:
      
  stage: dev
  region: eu-west-1
  environment:
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
  vpc:
    securityGroupIds:
      - sg-0638cef869c004839
    subnetIds:
      - subnet-0a253c49dd5b01847
      - subnet-042df5f146ec75e75
      - subnet-09b897b8965f500ec

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline


functions:
  getProductById:
    handler: handler.getProductById
    events:
      - httpApi:
          path: /products/{id}
          method: get
          summary: "Get product by id"
          description: "Returns product by provided id"
          queryStringParameters:
            id:
              required: true
              type: 'string'
              description: 'Product id'
          responseData:
            200:
              bodyType: 'Product'

  getProductsList:
    handler: handler.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
          summary: "Get list of products"
          description: "Returns all products"
          responseData:
            200:
              bodyType: 'Product[]'

  createProduct:
    handler: handler.createProduct
    events:
      - httpApi:
          path: /products
          method: post
          summary: "Create product"
          description: "Create a new product with initial stock count"
          bodyType: 'Product'
          responseData:
            200:
              bodyType: '{ id: string }'
